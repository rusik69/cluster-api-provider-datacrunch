name: Nightly Tests

on:
  schedule:
    # Run at 2 AM UTC every day
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual trigger

env:
  GO_VERSION: "1.22"

jobs:
  test-matrix:
    name: Test Go ${{ matrix.go-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ["1.20", "1.21", "1.22"]
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Run unit tests
      run: make test-unit

    - name: Run e2e tests (Linux only)
      if: matrix.os == 'ubuntu-latest'
      run: make test-e2e

  stress-tests:
    name: Stress Tests
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Run stress tests
      run: |
        # Run e2e tests multiple times to catch flaky tests
        for i in {1..5}; do
          echo "Running e2e tests iteration $i"
          make test-e2e || exit 1
        done

    - name: Run race condition tests
      run: go test -race -short ./...

    - name: Run memory leak tests
      run: |
        go test -memprofile=mem.prof -short ./...
        go tool pprof -text mem.prof | head -20

  performance-benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Run benchmarks
      run: |
        go test -bench=. -benchmem -run=^$ ./... | tee benchmark.txt

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark.txt
        retention-days: 30

  security-deep-scan:
    name: Deep Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Run Nancy vulnerability scanner
      run: |
        go list -json -deps ./... | docker run --rm -i sonatypecommunity/nancy:latest sleuth

    - name: Run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

  dependency-updates:
    name: Check Dependency Updates
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Check for outdated dependencies
      run: |
        go list -u -m all | grep -E '\[[^]]*\]$' | tee outdated.txt || true
        if [ -s outdated.txt ]; then
          echo "::warning::Outdated dependencies found"
          cat outdated.txt
        fi

    - name: Upload outdated dependencies list
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: outdated-dependencies
        path: outdated.txt
        retention-days: 7

  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [test-matrix, stress-tests, performance-benchmarks, security-deep-scan]
    if: failure()
    steps:
    - name: Create issue on failure
      uses: actions/github-script@v6
      with:
        script: |
          const title = `Nightly tests failed on ${new Date().toISOString().split('T')[0]}`;
          const body = `
          The nightly test suite has failed. Please check the workflow run for details.
          
          Workflow: ${{ github.workflow }}
          Run ID: ${{ github.run_id }}
          Commit: ${{ github.sha }}
          
          [View workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          `;
          
          // Check if an issue already exists for today
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'nightly-failure',
            state: 'open'
          });
          
          const today = new Date().toISOString().split('T')[0];
          const existingIssue = issues.find(issue => issue.title.includes(today));
          
          if (!existingIssue) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['nightly-failure', 'bug']
            });
          } 